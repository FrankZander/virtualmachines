#! <?xml version="1.0" encoding="UTF-8" ?>
#! <WORKSPACE
#    Command-line to run this workspace:
#        /Library/FME/2019.0/fme /Users/rcragg/Documents/GitHub/virtualmachines/workspaces/QuickSetup.fmw
#    
#!   ATTR_TYPE_ENCODING="SDF"
#!   BEGIN_PYTHON=""
#!   BEGIN_TCL=""
#!   CATEGORY=""
#!   DESCRIPTION=""
#!   DESTINATION="NONE"
#!   DESTINATION_ROUTING_FILE=""
#!   DOC_EXTENTS="5844.06 862.007"
#!   DOC_TOP_LEFT="-573.006 -707.006"
#!   END_PYTHON=""
#!   END_TCL=""
#!   EXPLICIT_BOOKMARK_ORDER="false"
#!   FME_BUILD_NUM="19260"
#!   FME_DOCUMENT_GUID="1ffb4670-339c-4ee3-a9d3-15b37a18417a"
#!   FME_DOCUMENT_PRIORGUID="94e1fdb4-19ac-4c30-aec6-f0ddba228df7"
#!   FME_GEOMETRY_HANDLING="Enhanced"
#!   FME_IMPLICIT_CSMAP_REPROJECTION_MODE="Auto"
#!   FME_REPROJECTION_ENGINE="FME"
#!   FME_SERVER_SERVICES=""
#!   FME_STROKE_MAX_DEVIATION="0"
#!   HISTORY=""
#!   IGNORE_READER_FAILURE="No"
#!   LAST_SAVE_BUILD="FME(R) 2019.0.2.0 (20190605 - Build 19260 - macosx)"
#!   LAST_SAVE_DATE="2019-06-21T11:41:09"
#!   LOG_FILE=""
#!   LOG_MAX_RECORDED_FEATURES="200"
#!   MARKDOWN_DESCRIPTION=""
#!   MARKDOWN_USAGE=""
#!   MAX_LOG_FEATURES="200"
#!   MULTI_WRITER_DATASET_ORDER="BY_ID"
#!   PASSWORD=""
#!   PYTHON_COMPATIBILITY="36"
#!   REDIRECT_TERMINATORS="NONE"
#!   SAVE_ON_PROMPT_AND_RUN="Yes"
#!   SHOW_ANNOTATIONS="true"
#!   SHOW_INFO_NODES="true"
#!   SOURCE="NONE"
#!   SOURCE_ROUTING_FILE=""
#!   TERMINATE_REJECTED="YES"
#!   TITLE=""
#!   USAGE=""
#!   USE_MARKDOWN=""
#!   VIEW_POSITION="-687.007 987.01"
#!   WARN_INVALID_XFORM_PARAM="Yes"
#!   WORKSPACE_VERSION="1"
#!   ZOOM_SCALE="100"
#! >
#! <DATASETS>
#! </DATASETS>
#! <DATA_TYPES>
#! </DATA_TYPES>
#! <GEOM_TYPES>
#! </GEOM_TYPES>
#! <FEATURE_TYPES>
#! </FEATURE_TYPES>
#! <FMESERVER>
#! </FMESERVER>
#! <GLOBAL_PARAMETERS>
#! </GLOBAL_PARAMETERS>
#! <COMMENTS>
#! <COMMENT
#!   IDENTIFIER="11"
#!   COMMENT_VALUE="&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;&#10;&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;&#10;p, li { white-space: pre-wrap; }&#10;&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;Consolas&apos;; font-size:13pt; font-weight:400; font-style:normal;&quot;&gt;&#10;&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Create your VPC&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;"
#!   POSITION="830.00300003000029 -480.50564005640064"
#!   TOP_LEFT="830.00300003000029 -480.50564005640064"
#!   BOTTOM_RIGHT="1806.0183001830017 -479.50564005640064"
#!   BOUNDING_RECT="830.00300003000029 -480.50564005640064 976.01530015300136 -1"
#!   ORDER="500000000000006"
#!   FOLLOW_ANCHOR="true"
#!   INFO_NODE="false"
#!   CUSTOM_USER_COLOR="false"
#!   COLOUR="0.28627450980392155,0.29803921568627451,0.0078431372549019607,0.78431372549019607"
#!   SIZE_POLICY="10"
#!   ANCHORED_NODE="3"
#! />
#! <COMMENT
#!   IDENTIFIER="12"
#!   COMMENT_VALUE="&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;&#10;&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;&#10;p, li { white-space: pre-wrap; }&#10;&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;Consolas&apos;; font-size:13pt; font-weight:400; font-style:normal;&quot;&gt;&#10;&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Create your FlexNet license server&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;"
#!   POSITION="1930.0183001830017 -480.50564005640064"
#!   TOP_LEFT="1930.0183001830017 -480.50564005640064"
#!   BOTTOM_RIGHT="2943.029670296703 -479.50564005640064"
#!   BOUNDING_RECT="1930.0183001830017 -480.50564005640064 1013.0113701137013 -1"
#!   ORDER="500000000000007"
#!   FOLLOW_ANCHOR="true"
#!   INFO_NODE="false"
#!   CUSTOM_USER_COLOR="false"
#!   COLOUR="0.28627450980392155,0.29803921568627451,0.0078431372549019607,0.78431372549019607"
#!   SIZE_POLICY="10"
#!   ANCHORED_NODE="5"
#! />
#! <COMMENT
#!   IDENTIFIER="13"
#!   COMMENT_VALUE="&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;&#10;&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;&#10;p, li { white-space: pre-wrap; }&#10;&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;Consolas&apos;; font-size:13pt; font-weight:400; font-style:normal;&quot;&gt;&#10;&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Create your FME Server&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;"
#!   POSITION="3067.029670296703 -480.50564005640064"
#!   TOP_LEFT="3067.029670296703 -480.50564005640064"
#!   BOTTOM_RIGHT="3954.039780397804 -479.50564005640064"
#!   BOUNDING_RECT="3067.029670296703 -480.50564005640064 887.01011010110096 -1"
#!   ORDER="500000000000008"
#!   FOLLOW_ANCHOR="true"
#!   INFO_NODE="false"
#!   CUSTOM_USER_COLOR="false"
#!   COLOUR="0.28627450980392155,0.29803921568627451,0.0078431372549019607,0.78431372549019607"
#!   SIZE_POLICY="10"
#!   ANCHORED_NODE="7"
#! />
#! <COMMENT
#!   IDENTIFIER="14"
#!   COMMENT_VALUE="&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;&#10;&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;&#10;p, li { white-space: pre-wrap; }&#10;&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;Consolas&apos;; font-size:13pt; font-weight:400; font-style:normal;&quot;&gt;&#10;&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Create your initial training machine&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;"
#!   POSITION="4078.039780397804 -480.50564005640064"
#!   TOP_LEFT="4078.039780397804 -480.50564005640064"
#!   BOTTOM_RIGHT="5271.0529505295053 -479.50564005640064"
#!   BOUNDING_RECT="4078.039780397804 -480.50564005640064 1193.0131701317014 -1"
#!   ORDER="500000000000009"
#!   FOLLOW_ANCHOR="true"
#!   INFO_NODE="false"
#!   CUSTOM_USER_COLOR="false"
#!   COLOUR="0.28627450980392155,0.29803921568627451,0.0078431372549019607,0.78431372549019607"
#!   SIZE_POLICY="10"
#!   ANCHORED_NODE="9"
#! />
#! <COMMENT
#!   IDENTIFIER="17"
#!   COMMENT_VALUE="&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;&#10;&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;&#10;p, li { white-space: pre-wrap; }&#10;&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;Consolas&apos;; font-size:13pt; font-weight:400; font-style:normal;&quot;&gt;&#10;&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;This is only here to make it easier to edit.&lt;/p&gt;&#10;&lt;p style=&quot;-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&#10;&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Right-click on this transformer.&lt;/p&gt;&#10;&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Select Edit.&lt;/p&gt;&#10;&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Set your AWS credentials.&lt;/p&gt;&#10;&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Save the transformer.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;"
#!   POSITION="37.000370003700027 155.00090000899999"
#!   TOP_LEFT="37.000370003700027 155.00090000899999"
#!   BOTTOM_RIGHT="780.00780007800063 156.00090000899999"
#!   BOUNDING_RECT="37.000370003700027 155.00090000899999 743.0074300743006 -1"
#!   ORDER="500000000000012"
#!   FOLLOW_ANCHOR="true"
#!   INFO_NODE="false"
#!   CUSTOM_USER_COLOR="false"
#!   COLOUR="0.28627450980392155,0.29803921568627451,0.0078431372549019607,0.78431372549019607"
#!   SIZE_POLICY="10"
#!   ANCHORED_NODE="15"
#! />
#! </COMMENTS>
#! <CONSTANTS>
#! </CONSTANTS>
#! <BOOKMARKS>
#! </BOOKMARKS>
#! <TRANSFORMERS>
#! <TRANSFORMER
#!   IDENTIFIER="2"
#!   TYPE="Creator"
#!   VERSION="5"
#!   POSITION="-573.00573005730053 -588.0058800588007"
#!   BOUNDING_RECT="-573.00573005730053 -588.0058800588007 431 71"
#!   ORDER="500000000000001"
#!   PARMS_EDITED="false"
#!   ENABLED="true"
#!   LAST_PARM_EDIT="18547"
#! >
#!     <OUTPUT_FEAT NAME="CREATED"/>
#!     <FEAT_COLLAPSED COLLAPSED="0"/>
#!     <XFORM_ATTR ATTR_NAME="_creation_instance" IS_USER_CREATED="false" FEAT_INDEX="0" />
#!     <XFORM_PARM PARM_NAME="ATEND" PARM_VALUE="no"/>
#!     <XFORM_PARM PARM_NAME="COORDS" PARM_VALUE="&lt;Unused&gt;"/>
#!     <XFORM_PARM PARM_NAME="COORDSYS" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="CRE_ATTR" PARM_VALUE="_creation_instance"/>
#!     <XFORM_PARM PARM_NAME="GEOM" PARM_VALUE="&lt;lt&gt;?xml&lt;space&gt;version=&lt;quote&gt;1.0&lt;quote&gt;&lt;space&gt;encoding=&lt;quote&gt;US_ASCII&lt;quote&gt;&lt;space&gt;standalone=&lt;quote&gt;no&lt;quote&gt;&lt;space&gt;?&lt;gt&gt;&lt;lt&gt;geometry&lt;space&gt;dimension=&lt;quote&gt;2&lt;quote&gt;&lt;gt&gt;&lt;lt&gt;null&lt;solidus&gt;&lt;gt&gt;&lt;lt&gt;&lt;solidus&gt;geometry&lt;gt&gt;"/>
#!     <XFORM_PARM PARM_NAME="GEOMTYPE" PARM_VALUE="Geometry Object"/>
#!     <XFORM_PARM PARM_NAME="NUM" PARM_VALUE="1"/>
#!     <XFORM_PARM PARM_NAME="PARAMETERS_GROUP" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="TRANSFORMER_GROUP" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="XFORMER_NAME" PARM_VALUE="Creator"/>
#! </TRANSFORMER>
#! <TRANSFORMER
#!   IDENTIFIER="3"
#!   TYPE="WorkspaceRunner"
#!   VERSION="3"
#!   POSITION="854.00300003000029 -636.00636006360071"
#!   BOUNDING_RECT="854.00300003000029 -636.00636006360071 934.01530015300136 71"
#!   ORDER="500000000000002"
#!   PARMS_EDITED="true"
#!   ENABLED="true"
#!   LAST_PARM_EDIT="18547"
#! >
#!     <OUTPUT_FEAT NAME="SUCCEEDED"/>
#!     <FEAT_COLLAPSED COLLAPSED="0"/>
#!     <XFORM_ATTR ATTR_NAME="_creation_instance" IS_USER_CREATED="false" FEAT_INDEX="0" />
#!     <OUTPUT_FEAT NAME="FAILED"/>
#!     <FEAT_COLLAPSED COLLAPSED="1"/>
#!     <XFORM_ATTR ATTR_NAME="_creation_instance" IS_USER_CREATED="false" FEAT_INDEX="1" />
#!     <XFORM_ATTR ATTR_NAME="_failure_message" IS_USER_CREATED="false" FEAT_INDEX="1" />
#!     <OUTPUT_FEAT NAME="SUMMARY"/>
#!     <FEAT_COLLAPSED COLLAPSED="2"/>
#!     <XFORM_ATTR ATTR_NAME="_proc_count" IS_USER_CREATED="false" FEAT_INDEX="2" />
#!     <XFORM_ATTR ATTR_NAME="_processes{}" IS_USER_CREATED="false" FEAT_INDEX="2" />
#!     <XFORM_PARM PARM_NAME="BLOCKING" PARM_VALUE="Yes"/>
#!     <XFORM_PARM PARM_NAME="LAST_KNOWN_PARAM_DEFS" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="MAX_PROC" PARM_VALUE="&lt;Unused&gt;"/>
#!     <XFORM_PARM PARM_NAME="MAX_TO_BATCH" PARM_VALUE="&lt;Unused&gt;"/>
#!     <XFORM_PARM PARM_NAME="PARAMETERS_GROUP" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="PARAMETER_TYPES" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="TRANSFORMER_GROUP" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="WORKSPACE_FILE" PARM_VALUE="CreateVPC.fmw"/>
#!     <XFORM_PARM PARM_NAME="WORKSPACE_PARAMETERS" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="WS_PARAMETERS_GROUP" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="XFORMER_NAME" PARM_VALUE="WorkspaceRunner_CreateVPC"/>
#! </TRANSFORMER>
#! <TRANSFORMER
#!   IDENTIFIER="5"
#!   TYPE="WorkspaceRunner"
#!   VERSION="3"
#!   POSITION="1954.0183001830017 -636.00636006360071"
#!   BOUNDING_RECT="1954.0183001830017 -636.00636006360071 971.01137011370133 71"
#!   ORDER="500000000000003"
#!   PARMS_EDITED="true"
#!   ENABLED="true"
#!   LAST_PARM_EDIT="18547"
#! >
#!     <OUTPUT_FEAT NAME="SUCCEEDED"/>
#!     <FEAT_COLLAPSED COLLAPSED="0"/>
#!     <XFORM_ATTR ATTR_NAME="_creation_instance" IS_USER_CREATED="false" FEAT_INDEX="0" />
#!     <OUTPUT_FEAT NAME="FAILED"/>
#!     <FEAT_COLLAPSED COLLAPSED="1"/>
#!     <XFORM_ATTR ATTR_NAME="_creation_instance" IS_USER_CREATED="false" FEAT_INDEX="1" />
#!     <XFORM_ATTR ATTR_NAME="_failure_message" IS_USER_CREATED="false" FEAT_INDEX="1" />
#!     <OUTPUT_FEAT NAME="SUMMARY"/>
#!     <FEAT_COLLAPSED COLLAPSED="2"/>
#!     <XFORM_ATTR ATTR_NAME="_proc_count" IS_USER_CREATED="false" FEAT_INDEX="2" />
#!     <XFORM_ATTR ATTR_NAME="_processes{}" IS_USER_CREATED="false" FEAT_INDEX="2" />
#!     <XFORM_PARM PARM_NAME="BLOCKING" PARM_VALUE="Yes"/>
#!     <XFORM_PARM PARM_NAME="LAST_KNOWN_PARAM_DEFS" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="MAX_PROC" PARM_VALUE="&lt;Unused&gt;"/>
#!     <XFORM_PARM PARM_NAME="MAX_TO_BATCH" PARM_VALUE="&lt;Unused&gt;"/>
#!     <XFORM_PARM PARM_NAME="PARAMETERS_GROUP" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="PARAMETER_TYPES" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="TRANSFORMER_GROUP" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="WORKSPACE_FILE" PARM_VALUE="./CreateLicenseServer.fmw"/>
#!     <XFORM_PARM PARM_NAME="WORKSPACE_PARAMETERS" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="WS_PARAMETERS_GROUP" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="XFORMER_NAME" PARM_VALUE="WorkspaceRunner_CreateLicenseServer"/>
#! </TRANSFORMER>
#! <TRANSFORMER
#!   IDENTIFIER="7"
#!   TYPE="WorkspaceRunner"
#!   VERSION="3"
#!   POSITION="3091.029670296703 -636.00636006360071"
#!   BOUNDING_RECT="3091.029670296703 -636.00636006360071 845.01011010110096 71"
#!   ORDER="500000000000004"
#!   PARMS_EDITED="true"
#!   ENABLED="true"
#!   LAST_PARM_EDIT="18547"
#! >
#!     <OUTPUT_FEAT NAME="SUCCEEDED"/>
#!     <FEAT_COLLAPSED COLLAPSED="0"/>
#!     <XFORM_ATTR ATTR_NAME="_creation_instance" IS_USER_CREATED="false" FEAT_INDEX="0" />
#!     <OUTPUT_FEAT NAME="FAILED"/>
#!     <FEAT_COLLAPSED COLLAPSED="1"/>
#!     <XFORM_ATTR ATTR_NAME="_creation_instance" IS_USER_CREATED="false" FEAT_INDEX="1" />
#!     <XFORM_ATTR ATTR_NAME="_failure_message" IS_USER_CREATED="false" FEAT_INDEX="1" />
#!     <OUTPUT_FEAT NAME="SUMMARY"/>
#!     <FEAT_COLLAPSED COLLAPSED="2"/>
#!     <XFORM_ATTR ATTR_NAME="_proc_count" IS_USER_CREATED="false" FEAT_INDEX="2" />
#!     <XFORM_ATTR ATTR_NAME="_processes{}" IS_USER_CREATED="false" FEAT_INDEX="2" />
#!     <XFORM_PARM PARM_NAME="BLOCKING" PARM_VALUE="Yes"/>
#!     <XFORM_PARM PARM_NAME="LAST_KNOWN_PARAM_DEFS" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="MAX_PROC" PARM_VALUE="&lt;Unused&gt;"/>
#!     <XFORM_PARM PARM_NAME="MAX_TO_BATCH" PARM_VALUE="&lt;Unused&gt;"/>
#!     <XFORM_PARM PARM_NAME="PARAMETERS_GROUP" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="PARAMETER_TYPES" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="TRANSFORMER_GROUP" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="WORKSPACE_FILE" PARM_VALUE="$(FME_MF_DIR)CreateFMEServer.fmw"/>
#!     <XFORM_PARM PARM_NAME="WORKSPACE_PARAMETERS" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="WS_PARAMETERS_GROUP" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="XFORMER_NAME" PARM_VALUE="WorkspaceRunner_CreateFMEServer"/>
#! </TRANSFORMER>
#! <TRANSFORMER
#!   IDENTIFIER="9"
#!   TYPE="WorkspaceRunner"
#!   VERSION="3"
#!   POSITION="4102.039780397804 -636.00636006360071"
#!   BOUNDING_RECT="4102.039780397804 -636.00636006360071 1151.0131701317014 71"
#!   ORDER="500000000000005"
#!   PARMS_EDITED="true"
#!   ENABLED="true"
#!   LAST_PARM_EDIT="18547"
#! >
#!     <OUTPUT_FEAT NAME="SUCCEEDED"/>
#!     <FEAT_COLLAPSED COLLAPSED="0"/>
#!     <XFORM_ATTR ATTR_NAME="_creation_instance" IS_USER_CREATED="false" FEAT_INDEX="0" />
#!     <OUTPUT_FEAT NAME="FAILED"/>
#!     <FEAT_COLLAPSED COLLAPSED="1"/>
#!     <XFORM_ATTR ATTR_NAME="_creation_instance" IS_USER_CREATED="false" FEAT_INDEX="1" />
#!     <XFORM_ATTR ATTR_NAME="_failure_message" IS_USER_CREATED="false" FEAT_INDEX="1" />
#!     <OUTPUT_FEAT NAME="SUMMARY"/>
#!     <FEAT_COLLAPSED COLLAPSED="2"/>
#!     <XFORM_ATTR ATTR_NAME="_proc_count" IS_USER_CREATED="false" FEAT_INDEX="2" />
#!     <XFORM_ATTR ATTR_NAME="_processes{}" IS_USER_CREATED="false" FEAT_INDEX="2" />
#!     <XFORM_PARM PARM_NAME="BLOCKING" PARM_VALUE="Yes"/>
#!     <XFORM_PARM PARM_NAME="LAST_KNOWN_PARAM_DEFS" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="MAX_PROC" PARM_VALUE="&lt;Unused&gt;"/>
#!     <XFORM_PARM PARM_NAME="MAX_TO_BATCH" PARM_VALUE="&lt;Unused&gt;"/>
#!     <XFORM_PARM PARM_NAME="PARAMETERS_GROUP" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="PARAMETER_TYPES" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="TRANSFORMER_GROUP" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="WORKSPACE_FILE" PARM_VALUE="./InitialMachineCreator.fmw"/>
#!     <XFORM_PARM PARM_NAME="WORKSPACE_PARAMETERS" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="WS_PARAMETERS_GROUP" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="XFORMER_NAME" PARM_VALUE="WorkspaceRunner_InitialMachineCreator"/>
#! </TRANSFORMER>
#! <TRANSFORMER
#!   IDENTIFIER="15"
#!   TYPE="AWSCredentialSupplier"
#!   VERSION="1"
#!   POSITION="79.00079000790015 -321.00321003210041"
#!   BOUNDING_RECT="79.00079000790015 -321.00321003210041 743.0074300743006 71"
#!   ORDER="500000000000010"
#!   PARMS_EDITED="false"
#!   ENABLED="true"
#!   LAST_PARM_EDIT="19260"
#! >
#!     <OUTPUT_FEAT NAME="Output"/>
#!     <FEAT_COLLAPSED COLLAPSED="0"/>
#!     <XFORM_ATTR ATTR_NAME="_creation_instance" IS_USER_CREATED="false" FEAT_INDEX="0" />
#!     <XFORM_ATTR ATTR_NAME="AWS_ACCESS_KEY_ID" IS_USER_CREATED="false" FEAT_INDEX="0" />
#!     <XFORM_ATTR ATTR_NAME="AWS_SECRET_ACCESS_KEY" IS_USER_CREATED="false" FEAT_INDEX="0" />
#!     <XFORM_PARM PARM_NAME="AWS_ACCESS_KEY_ID" PARM_VALUE="AKIAICERN4WDSWP5VUDQ"/>
#!     <XFORM_PARM PARM_NAME="AWS_SECRET_ACCESS_KEY" PARM_VALUE="fme_decrypt(MDowfCN8I3xcG3GQ/TeRRUJUZ5LDPtdvpscbh7Nj9gG/INBkAGA+fkaDrNbhZtfa3rmkUUrCxKWaAFwiYsKgWJNl/0mRpxUuP+IT2c+Qhh26JEZtUWAmpuoaQCdQ3ykKWm2zaoAM5MBCGaGEuYe+6AS07/nLNRJwqp1jdwP1FgVCbXRvZtWfKjEZlNJYQ+EicVc6cv2DxCYJyTljvXwF8mKxenML6FKJiHARQCO8OMJidKKZQJP1SeYIhqB0YrtGw4cGV2ZquQKifvRjB2Tl6wBAWDmeCg+R1jvft1tR17SISyTDv77K+mV80w2aaUSgybbF7coM0BrQPcpehfjlW+YxV73+9mPMFXKQeznZ22T8MJor57O44p8U2NQCw35HiFBs0oVP9VkkY0D/WzGRevseyX1pIEWJSQSFwkJVhiyXavMDz5E5SEYgTZHfVeGBXCDuIEEbfRRkPU5yD2nw2ZAVimDRD7UQhEEY6PosGqU17He4y35WEfAggQ40+EKuupOQSZRsKotTTqlYGHJtX49ymuKqfyZzOAUSUzDMcj8gfDgzOCcuhw2sK3fJaMszd6ht4bVmyf7AYkBUHSfX5VdRcrDmSPRhTe9s/lB1Hzmzl5yWgFMc7fElLkf2e7dyDLFiReD40qhaFyasAzd5uZeEOHPj+iEY0Uu2FpOqto02lcr5GKztM6hI1Hz9sF9i//2fdxLputH3j4mDy1RZUJ/3fJ5bgkXmqxX73L17uLV/kFNbclbGP2yb8uH0l7NMq9FbqH1BzjiEFT+Mgctq0vFdkM5ogemMPpPCTFY5EJFrzSUokD29NINzqDMKdff+PiFh//R3QAeT6P1ahUes7/z+e/CE/mqAXuVwvQRJnA53GjxmssBCsiAOX81WGDCOg0PWPqbez20kP/orEYtf0KDmmvFfKOdp)"/>
#!     <XFORM_PARM PARM_NAME="TRANSFORMER_GROUP" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="XFORMER_NAME" PARM_VALUE="AWSCredentialSupplier"/>
#! </TRANSFORMER>
#! </TRANSFORMERS>
#! <FEAT_LINKS>
#! <FEAT_LINK
#!   IDENTIFIER="4"
#!   SOURCE_NODE="2"
#!   TARGET_NODE="3"
#!   SOURCE_PORT_DESC="fo 0 CREATED"
#!   TARGET_PORT_DESC="fi 0 "
#!   ENABLED="true"
#!   EXECUTION_IDX="0"
#!   HIDDEN="false"
#!   EXTRA_POINTS=""
#! />
#! <FEAT_LINK
#!   IDENTIFIER="16"
#!   SOURCE_NODE="2"
#!   TARGET_NODE="15"
#!   SOURCE_PORT_DESC="fo 0 CREATED"
#!   TARGET_PORT_DESC="fi 0 Input"
#!   ENABLED="true"
#!   EXECUTION_IDX="1"
#!   HIDDEN="false"
#!   EXTRA_POINTS=""
#! />
#! <FEAT_LINK
#!   IDENTIFIER="6"
#!   SOURCE_NODE="3"
#!   TARGET_NODE="5"
#!   SOURCE_PORT_DESC="fo 0 SUCCEEDED"
#!   TARGET_PORT_DESC="fi 0 "
#!   ENABLED="true"
#!   EXECUTION_IDX="0"
#!   HIDDEN="false"
#!   EXTRA_POINTS=""
#! />
#! <FEAT_LINK
#!   IDENTIFIER="8"
#!   SOURCE_NODE="5"
#!   TARGET_NODE="7"
#!   SOURCE_PORT_DESC="fo 0 SUCCEEDED"
#!   TARGET_PORT_DESC="fi 0 "
#!   ENABLED="true"
#!   EXECUTION_IDX="0"
#!   HIDDEN="false"
#!   EXTRA_POINTS=""
#! />
#! <FEAT_LINK
#!   IDENTIFIER="10"
#!   SOURCE_NODE="7"
#!   TARGET_NODE="9"
#!   SOURCE_PORT_DESC="fo 0 SUCCEEDED"
#!   TARGET_PORT_DESC="fi 0 "
#!   ENABLED="true"
#!   EXECUTION_IDX="0"
#!   HIDDEN="false"
#!   EXTRA_POINTS=""
#! />
#! </FEAT_LINKS>
#! <BREAKPOINTS>
#! </BREAKPOINTS>
#! <ATTR_LINKS>
#! </ATTR_LINKS>
#! <SUBDOCUMENTS>
#! </SUBDOCUMENTS>
#! <LOOKUP_TABLES>
#! </LOOKUP_TABLES>
#! </WORKSPACE>

FME_PYTHON_VERSION 36
#! START_HEADER
#! START_WB_HEADER
READER_TYPE MULTI_READER
WRITER_TYPE NULL
WRITER_KEYWORD NULL_DEST
NULL_DEST_DATASET null
#! END_WB_HEADER
#! START_WB_HEADER
#! END_WB_HEADER
#! END_HEADER

LOG_FILENAME "$(FME_MF_DIR)QuickSetup.log"
LOG_APPEND NO
LOG_FILTER_MASK -1
LOG_MAX_FEATURES 200
LOG_MAX_RECORDED_FEATURES 200
FME_REPROJECTION_ENGINE FME
FME_IMPLICIT_CSMAP_REPROJECTION_MODE Auto
FME_GEOMETRY_HANDLING Enhanced
FME_STROKE_MAX_DEVIATION 0
# -------------------------------------------------------------------------

MULTI_READER_CONTINUE_ON_READER_FAILURE No

# -------------------------------------------------------------------------

MACRO WORKSPACE_NAME QuickSetup
MACRO FME_VIEWER_APP fmedatainspector
DEFAULT_MACRO WB_CURRENT_CONTEXT
# -------------------------------------------------------------------------
Tcl2 proc Creator_CoordSysRemover {} {   global FME_CoordSys;   set FME_CoordSys {}; }
MACRO Creator_XML     NOT_ACTIVATED
MACRO Creator_CLASSIC NOT_ACTIVATED
MACRO Creator_2D3D    2D_GEOMETRY
MACRO Creator_COORDS  <Unused>
INCLUDE [ if { {Geometry Object} == {Geometry Object} } {            puts {MACRO Creator_XML *} } ]
INCLUDE [ if { {Geometry Object} == {2D Coordinate List} } {            puts {MACRO Creator_2D3D 2D_GEOMETRY};            puts {MACRO Creator_CLASSIC *} } ]
INCLUDE [ if { {Geometry Object} == {3D Coordinate List} } {            puts {MACRO Creator_2D3D 3D_GEOMETRY};            puts {MACRO Creator_CLASSIC *} } ]
INCLUDE [ if { {Geometry Object} == {2D Min/Max Box} } {            set comment {                We need to turn the COORDS which are                    minX minY maxX maxY                into a full polygon list of coordinates            };            set splitCoords [split [string trim {<Unused>}]];            if { [llength $splitCoords] > 4} {               set trimmedCoords {};               foreach item $splitCoords { if { $item != {} } {lappend trimmedCoords $item} };               set splitCoords $trimmedCoords;            };            if { [llength $splitCoords] != 4 } {                error {Creator: Coordinate list is expected to be a space delimited list of four numbers as 'minx miny maxx maxy' - `<Unused>' is invalid};            };            set minX [lindex $splitCoords 0];            set minY [lindex $splitCoords 1];            set maxX [lindex $splitCoords 2];            set maxY [lindex $splitCoords 3];            puts "MACRO Creator_COORDS $minX $minY $minX $maxY $maxX $maxY $maxX $minY $minX $minY";            puts {MACRO Creator_2D3D 2D_GEOMETRY};            puts {MACRO Creator_CLASSIC *} } ]
FACTORY_DEF $(Creator_XML) CreationFactory    FACTORY_NAME Creator_XML_Creator    CREATE_AT_END no    OUTPUT FEATURE_TYPE _____CREATED______        @Geometry(FROM_ENCODED_STRING,<lt>?xml<space>version=<quote>1.0<quote><space>encoding=<quote>US_ASCII<quote><space>standalone=<quote>no<quote><space>?<gt><lt>geometry<space>dimension=<quote>2<quote><gt><lt>null<solidus><gt><lt><solidus>geometry<gt>)
FACTORY_DEF $(Creator_CLASSIC) CreationFactory    FACTORY_NAME Creator_CLASSIC_Creator    $(Creator_2D3D) $(Creator_COORDS)    CREATE_AT_END no    OUTPUT FEATURE_TYPE _____CREATED______
FACTORY_DEF * TeeFactory    FACTORY_NAME Creator_Cloner    INPUT FEATURE_TYPE _____CREATED______        @Tcl2(Creator_CoordSysRemover)        @CoordSys()    NUMBER_OF_COPIES 1    COPY_NUMBER_ATTRIBUTE "_creation_instance"    OUTPUT FEATURE_TYPE Creator_CREATED        fme_feature_type Creator
FACTORY_DEF * TeeFactory   FACTORY_NAME "Creator CREATED Splitter"   INPUT FEATURE_TYPE Creator_CREATED   OUTPUT FEATURE_TYPE Creator_CREATED_0_GJAgmIF9G6c=   OUTPUT FEATURE_TYPE Creator_CREATED_1_Exx7idfjvCA=
FACTORY_DEF * BranchingFactory   FACTORY_NAME "Creator_CREATED_0_GJAgmIF9G6c= Brancher -1 4"   INPUT FEATURE_TYPE Creator_CREATED_0_GJAgmIF9G6c=   TARGET_FACTORY "$(WB_CURRENT_CONTEXT)_CREATOR_BRANCH_TARGET"   MAXIMUM_COUNT None   OUTPUT PASSED FEATURE_TYPE *
FACTORY_DEF * BranchingFactory   FACTORY_NAME "Creator_CREATED_1_Exx7idfjvCA= Brancher -1 16"   INPUT FEATURE_TYPE Creator_CREATED_1_Exx7idfjvCA=   TARGET_FACTORY "$(WB_CURRENT_CONTEXT)_CREATOR_BRANCH_TARGET"   MAXIMUM_COUNT None   OUTPUT PASSED FEATURE_TYPE *
# -------------------------------------------------------------------------
FACTORY_DEF * TeeFactory   FACTORY_NAME "$(WB_CURRENT_CONTEXT)_CREATOR_BRANCH_TARGET"   INPUT FEATURE_TYPE *  OUTPUT FEATURE_TYPE *
# -------------------------------------------------------------------------
FACTORY_DEF * TeeFactory   FACTORY_NAME "AWSCredentialSupplier Input Input Collector"   INPUT FEATURE_TYPE Creator_CREATED_1_Exx7idfjvCA=   OUTPUT FEATURE_TYPE AWSCredentialSupplier_Input
MACRO AWSCredentialSupplier_WORKSPACE_NAME AWSCredentialSupplier
MACRO $(AWSCredentialSupplier_WORKSPACE_NAME)_XFORMER_NAME AWSCredentialSupplier
MACRO $(AWSCredentialSupplier_WORKSPACE_NAME)_TRANSFORMER_GROUP 
MACRO $(AWSCredentialSupplier_WORKSPACE_NAME)_AWS_ACCESS_KEY_ID AKIAICERN4WDSWP5VUDQ
MACRO $(AWSCredentialSupplier_WORKSPACE_NAME)_AWS_SECRET_ACCESS_KEY fme_decrypt(MDowfCN8I3xcG3GQ/TeRRUJUZ5LDPtdvpscbh7Nj9gG/INBkAGA+fkaDrNbhZtfa3rmkUUrCxKWaAFwiYsKgWJNl/0mRpxUuP+IT2c+Qhh26JEZtUWAmpuoaQCdQ3ykKWm2zaoAM5MBCGaGEuYe+6AS07/nLNRJwqp1jdwP1FgVCbXRvZtWfKjEZlNJYQ+EicVc6cv2DxCYJyTljvXwF8mKxenML6FKJiHARQCO8OMJidKKZQJP1SeYIhqB0YrtGw4cGV2ZquQKifvRjB2Tl6wBAWDmeCg+R1jvft1tR17SISyTDv77K+mV80w2aaUSgybbF7coM0BrQPcpehfjlW+YxV73+9mPMFXKQeznZ22T8MJor57O44p8U2NQCw35HiFBs0oVP9VkkY0D/WzGRevseyX1pIEWJSQSFwkJVhiyXavMDz5E5SEYgTZHfVeGBXCDuIEEbfRRkPU5yD2nw2ZAVimDRD7UQhEEY6PosGqU17He4y35WEfAggQ40+EKuupOQSZRsKotTTqlYGHJtX49ymuKqfyZzOAUSUzDMcj8gfDgzOCcuhw2sK3fJaMszd6ht4bVmyf7AYkBUHSfX5VdRcrDmSPRhTe9s/lB1Hzmzl5yWgFMc7fElLkf2e7dyDLFiReD40qhaFyasAzd5uZeEOHPj+iEY0Uu2FpOqto02lcr5GKztM6hI1Hz9sF9i//2fdxLputH3j4mDy1RZUJ/3fJ5bgkXmqxX73L17uLV/kFNbclbGP2yb8uH0l7NMq9FbqH1BzjiEFT+Mgctq0vFdkM5ogemMPpPCTFY5EJFrzSUokD29NINzqDMKdff+PiFh//R3QAeT6P1ahUes7/z+e/CE/mqAXuVwvQRJnA53GjxmssBCsiAOX81WGDCOg0PWPqbez20kP/orEYtf0KDmmvFfKOdp)
INCLUDE_CUSTOM_TRANSFORMER_VER AWSCredentialSupplier:1
FACTORY_DEF * TeeFactory   FACTORY_NAME "AWSCredentialSupplier Output Output Renamer/Nuker"   INPUT FEATURE_TYPE AWSCredentialSupplier_Output
# -------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# Determine the "NULL" device so we can ensure we don't get stray output
# messing up our stdout if we are running workspaces in the background
# See http://wiki.tcl.tk/1649 for a description of the tcl_platform
# variable, the "platform" part seems to have valid values windows, unix, and
# macintosh (the latter of which is actually pre-OS X)
# PR#83334 - On Windows when we are creating child process asynchronously
# (BLOCKING == NO), we use FME's @System() call (FME_Execute System) ensuring
# that the child process doesn't inherit handles from parent process. This allows
# parent process to close feature caches and not depend on spawned processes.
Tcl2 if { $tcl_platform(platform) == {windows} } {         set ::null_device {NUL:};         set ::__WR_ENV_HELPER__ {};         set ::__platform__ {windows};      } else {         set ::null_device {/dev/null};         set ::__WR_ENV_HELPER__ {/usr/bin/env FME_SUBPROCESS_RUN_DETACHED=1};         set ::__platform__ {unix};      };
# ------------------------------------------------------------------------------
# Escape existing double quotes and then wrap in double quotes
Tcl2 proc quotifyForParameterFileV3 { sourceString } {   if {[string length $sourceString] == 0} {      return {\"\"};   };   set doQuote 0;   if {[string first { } $sourceString] != -1} {      set doQuote 1;   };   set sourceString [string map {{\"} {\\"}} $sourceString];   if {$doQuote == 1} {      set sourceString \\"$sourceString\\";   };   return $sourceString; };
# ------------------------------------------------------------------------------
# Main runner procedure, takes in a parameter list as string which is delimited
# by \x07 (BELL) character and the workspace to run
Tcl2 proc WorkspaceRunner_CreateVPC_6566268f_11f7_4961_ad05_d2f46dc8e4483_runner { parmListString workspaceFile } {    global WorkspaceRunner_CreateVPC_6566268f_11f7_4961_ad05_d2f46dc8e4483_commands;    global WorkspaceRunner_CreateVPC_6566268f_11f7_4961_ad05_d2f46dc8e4483_batch_count;    incr WorkspaceRunner_CreateVPC_6566268f_11f7_4961_ad05_d2f46dc8e4483_batch_count 0;    if { [info exists WorkspaceRunner_CreateVPC_6566268f_11f7_4961_ad05_d2f46dc8e4483_commands] == 0 } {       set WorkspaceRunner_CreateVPC_6566268f_11f7_4961_ad05_d2f46dc8e4483_commands {};    };    set workspaceFileUnix [regsub -all {\\} $workspaceFile {/}];    set parmListString [string range $parmListString 1 end-1];    set comment    {        Build up the command line in a list, which we'll write it out to a        parameter file.    };    set commandArguments {};    set commandArgumentsToLog {};    set workspaceToRun [quotifyForParameterFileV3 $workspaceFileUnix];    lappend commandArguments $workspaceToRun;    lappend commandArgumentsToLog $workspaceToRun;    set parameterList [split $parmListString \x07];    set parmTypes [split {} {,}];    foreach {parmName parmValue} $parameterList {parmType} $parmTypes {      set parmValue [quotifyForParameterFileV3 $parmValue];      lappend commandArguments --$parmName;      lappend commandArgumentsToLog --$parmName;      lappend commandArguments $parmValue;      if { [string first {PASSWORD} $parmType] != -1 } {           lappend commandArgumentsToLog {*********};      } else {           lappend commandArgumentsToLog $parmValue;      };    };    lappend WorkspaceRunner_CreateVPC_6566268f_11f7_4961_ad05_d2f46dc8e4483_commands [join $commandArguments " "];    incr WorkspaceRunner_CreateVPC_6566268f_11f7_4961_ad05_d2f46dc8e4483_batch_count;    if { {Yes} == {No} && {<Unused>} > 1  && $WorkspaceRunner_CreateVPC_6566268f_11f7_4961_ad05_d2f46dc8e4483_batch_count <= {<Unused>} } {       FME_LogMessage fme_inform 933450 WorkspaceRunner_CreateVPC $commandArgumentsToLog;    } else {       FME_LogMessage fme_inform 933451 WorkspaceRunner_CreateVPC $commandArgumentsToLog;    };    if { {Yes} != {No} || $WorkspaceRunner_CreateVPC_6566268f_11f7_4961_ad05_d2f46dc8e4483_batch_count == {<Unused>} } {       set WorkspaceRunner_CreateVPC_6566268f_11f7_4961_ad05_d2f46dc8e4483_batch_count 0;       set commandFile [WorkspaceRunner_CreateVPC_6566268f_11f7_4961_ad05_d2f46dc8e4483_writeCommandFile $WorkspaceRunner_CreateVPC_6566268f_11f7_4961_ad05_d2f46dc8e4483_commands];       if { $commandFile == {} } {          return FAILURE;       };       set WorkspaceRunner_CreateVPC_6566268f_11f7_4961_ad05_d2f46dc8e4483_commands {};       set fmeAbsPath {$(FME_HOME_UNIX)/fme};       if { {Yes} == {No} && $::__platform__ == {windows} }       {          set comment          {             Only on Windows in non-blocking mode we have to make sure that paths             are always quoted because we use non-Tcl method to run the final command          };          set commandFile \\"$commandFile\\";          set fmeAbsPath \\"$fmeAbsPath\\";       };       lappend cmdArgs {*}$::__WR_ENV_HELPER__ $fmeAbsPath COMMAND_FILE $commandFile;    } else {       return SUCCESS;    };    return [WorkspaceRunner_CreateVPC_6566268f_11f7_4961_ad05_d2f46dc8e4483_runCommand $cmdArgs $workspaceFileUnix]; }
# ------------------------------------------------------------------------------
# When batching commands, any overflow commands will be run at the end. Say you
# batch by 2 and there are 5 incoming features. Then we will have 2 batches with
# 2 commands each and 1 overflow batch with 1 command
Tcl2 proc WorkspaceRunner_CreateVPC_6566268f_11f7_4961_ad05_d2f46dc8e4483_flushPending { } {    global WorkspaceRunner_CreateVPC_6566268f_11f7_4961_ad05_d2f46dc8e4483_commands;    if { [info exists WorkspaceRunner_CreateVPC_6566268f_11f7_4961_ad05_d2f46dc8e4483_commands] == 1 && [llength $WorkspaceRunner_CreateVPC_6566268f_11f7_4961_ad05_d2f46dc8e4483_commands] > 0 } {       set workspaceToRun [lindex $WorkspaceRunner_CreateVPC_6566268f_11f7_4961_ad05_d2f46dc8e4483_commands 0];       set commandFile [WorkspaceRunner_CreateVPC_6566268f_11f7_4961_ad05_d2f46dc8e4483_writeCommandFile $WorkspaceRunner_CreateVPC_6566268f_11f7_4961_ad05_d2f46dc8e4483_commands];       if { $commandFile == {} } {          return FAILURE;       };       set WorkspaceRunner_CreateVPC_6566268f_11f7_4961_ad05_d2f46dc8e4483_commands {};       set fmeAbsPath {$(FME_HOME_UNIX)/fme};       if { {Yes} == {No} && $::__platform__ == {windows} }       {          set comment          {             Only on Windows in non-blocking mode we have to make sure that paths             are always quoted because we use non-Tcl method to run the final command          };          set commandFile \\"$commandFile\\";          set fmeAbsPath \\"$fmeAbsPath\\";       };       lappend commandArguments {*}$::__WR_ENV_HELPER__ $fmeAbsPath COMMAND_FILE $commandFile;       return [WorkspaceRunner_CreateVPC_6566268f_11f7_4961_ad05_d2f46dc8e4483_runCommand $commandArguments $workspaceToRun];    };    return SUCCESS; }
# ------------------------------------------------------------------------------
# Build and run the command
Tcl2 proc WorkspaceRunner_CreateVPC_6566268f_11f7_4961_ad05_d2f46dc8e4483_runCommand {commandArguments workspaceFileUnix} {    if { {Yes} == {No} && $::__platform__ != {windows} } {       lappend commandArguments \">$::null_device\";       lappend commandArguments \"<$::null_device\";    };    set comment    {       The below 2>@1 forces any standard error output to go into the msg variable       or to NULL if we're running in the background.    };    if { {Yes} != {No} || $::__platform__ != {windows} } {       lappend commandArguments {2>@1};    };    if { {Yes} == {No} } {        lappend commandArguments {&};    };    if { {Yes} == {No} } {       after 1000;       while { [FME_CanSpawnFme <Unused>] == {0} } {             after 2000;       };    };    if { Yes == {No} && {<Unused>} > 1 } {       FME_LogMessage fme_inform 933452 WorkspaceRunner_CreateVPC $commandArguments;    } else {       FME_LogMessage fme_inform 933453 WorkspaceRunner_CreateVPC $commandArguments;    };    if { $::__platform__ == {windows} && {Yes} == {No} } {       set comment       {          Only on Windows in non-blocking mode we convert Tcl list to string joined          by space (affectively flattening the list). Prior to this we have already          ensured that in this mode paths are always quoted.       };       set commandArguments [join $commandArguments " "];       set catchResult [catch {FME_Execute System RETURN_PID_IF_ASYNC $commandArguments} msg];    } else {       set catchResult [catch {eval [concat exec $commandArguments]} msg];    };    if { $catchResult } {       set msg [regsub {\015*\012child[^\012]*$} $msg {}];       FME_LogMessage fme_warn 933454 WorkspaceRunner_CreateVPC $workspaceFileUnix "\n\n$msg\n";       FME_SetAttribute _failure_message $msg;       return FAILURE;    } else {       global WorkspaceRunner_CreateVPC_6566268f_11f7_4961_ad05_d2f46dc8e4483_process_count;       incr WorkspaceRunner_CreateVPC_6566268f_11f7_4961_ad05_d2f46dc8e4483_process_count;       if { {Yes} == {No} } {           FME_LogMessage fme_inform 933455 WorkspaceRunner_CreateVPC $workspaceFileUnix;           global WorkspaceRunner_CreateVPC_6566268f_11f7_4961_ad05_d2f46dc8e4483_all_processes;           lappend WorkspaceRunner_CreateVPC_6566268f_11f7_4961_ad05_d2f46dc8e4483_all_processes $msg;       } else {           FME_LogMessage fme_inform 933456 WorkspaceRunner_CreateVPC $workspaceFileUnix;       };       return SUCCESS;    }; }
# ------------------------------------------------------------------------------
# Create and write commands to command file
Tcl2 proc WorkspaceRunner_CreateVPC_6566268f_11f7_4961_ad05_d2f46dc8e4483_writeCommandFile { commands } {    set commandFile [FME_TempFilename wsr_cm_];    if { [catch { set cmdFileId [open $commandFile "w"] } msg ] } {       FME_LogMessage fme_warn 933457 WorkspaceRunner_CreateVPC $commandFile "\n\n$msg\n";       FME_SetAttribute _failure_message $msg;       return {};    };    fconfigure $cmdFileId -encoding utf-8;    puts $cmdFileId {#! encoding=\"utf-8\"};    puts $cmdFileId DELETE_FILE_AFTER_LOAD;    foreach {command} $commands {       puts $cmdFileId $command;    };    close $cmdFileId;    return $commandFile; }
# ------------------------------------------------------------------------------
# Use \x07 (BELL) character as the delimiter when writing WORKSPACE_PARAMETERS
# to mapping file
FACTORY_DEF * TestFactory    FACTORY_NAME WorkspaceRunner_CreateVPC_ExecutorAndRouter    INPUT  FEATURE_TYPE Creator_CREATED_0_GJAgmIF9G6c=    TEST @Tcl2("WorkspaceRunner_CreateVPC_6566268f_11f7_4961_ad05_d2f46dc8e4483_runner {()} {CreateVPC.fmw}") == SUCCESS    OUTPUT PASSED FEATURE_TYPE WorkspaceRunner_CreateVPC_SUCCEEDED
Tcl2 proc WorkspaceRunner_CreateVPC_6566268f_11f7_4961_ad05_d2f46dc8e4483_summarizer { } {     global WorkspaceRunner_CreateVPC_6566268f_11f7_4961_ad05_d2f46dc8e4483_process_count;     set comment { incr 0 creates the variable if it wasn't present };     incr WorkspaceRunner_CreateVPC_6566268f_11f7_4961_ad05_d2f46dc8e4483_process_count 0;     FME_SetAttribute _proc_count [set WorkspaceRunner_CreateVPC_6566268f_11f7_4961_ad05_d2f46dc8e4483_process_count];     global WorkspaceRunner_CreateVPC_6566268f_11f7_4961_ad05_d2f46dc8e4483_all_processes;     if {[info exists WorkspaceRunner_CreateVPC_6566268f_11f7_4961_ad05_d2f46dc8e4483_all_processes]} {         set index 0;         foreach pid [set WorkspaceRunner_CreateVPC_6566268f_11f7_4961_ad05_d2f46dc8e4483_all_processes] {             FME_SetAttribute \"_processes{$index}\" $pid;             incr index;         }     } }
FACTORY_DEF * CreationFactory    FACTORY_NAME WorkspaceRunner_CreateVPC_SummaryMaker    CREATE_AT_END yes
# -------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# Determine the "NULL" device so we can ensure we don't get stray output
# messing up our stdout if we are running workspaces in the background
# See http://wiki.tcl.tk/1649 for a description of the tcl_platform
# variable, the "platform" part seems to have valid values windows, unix, and
# macintosh (the latter of which is actually pre-OS X)
# PR#83334 - On Windows when we are creating child process asynchronously
# (BLOCKING == NO), we use FME's @System() call (FME_Execute System) ensuring
# that the child process doesn't inherit handles from parent process. This allows
# parent process to close feature caches and not depend on spawned processes.
Tcl2 if { $tcl_platform(platform) == {windows} } {         set ::null_device {NUL:};         set ::__WR_ENV_HELPER__ {};         set ::__platform__ {windows};      } else {         set ::null_device {/dev/null};         set ::__WR_ENV_HELPER__ {/usr/bin/env FME_SUBPROCESS_RUN_DETACHED=1};         set ::__platform__ {unix};      };
# ------------------------------------------------------------------------------
# Escape existing double quotes and then wrap in double quotes
Tcl2 proc quotifyForParameterFileV3 { sourceString } {   if {[string length $sourceString] == 0} {      return {\"\"};   };   set doQuote 0;   if {[string first { } $sourceString] != -1} {      set doQuote 1;   };   set sourceString [string map {{\"} {\\"}} $sourceString];   if {$doQuote == 1} {      set sourceString \\"$sourceString\\";   };   return $sourceString; };
# ------------------------------------------------------------------------------
# Main runner procedure, takes in a parameter list as string which is delimited
# by \x07 (BELL) character and the workspace to run
Tcl2 proc WorkspaceRunner_CreateLicenseServer_46391337_6baa_40f3_b26f_fd1430e303482_runner { parmListString workspaceFile } {    global WorkspaceRunner_CreateLicenseServer_46391337_6baa_40f3_b26f_fd1430e303482_commands;    global WorkspaceRunner_CreateLicenseServer_46391337_6baa_40f3_b26f_fd1430e303482_batch_count;    incr WorkspaceRunner_CreateLicenseServer_46391337_6baa_40f3_b26f_fd1430e303482_batch_count 0;    if { [info exists WorkspaceRunner_CreateLicenseServer_46391337_6baa_40f3_b26f_fd1430e303482_commands] == 0 } {       set WorkspaceRunner_CreateLicenseServer_46391337_6baa_40f3_b26f_fd1430e303482_commands {};    };    set workspaceFileUnix [regsub -all {\\} $workspaceFile {/}];    set parmListString [string range $parmListString 1 end-1];    set comment    {        Build up the command line in a list, which we'll write it out to a        parameter file.    };    set commandArguments {};    set commandArgumentsToLog {};    set workspaceToRun [quotifyForParameterFileV3 $workspaceFileUnix];    lappend commandArguments $workspaceToRun;    lappend commandArgumentsToLog $workspaceToRun;    set parameterList [split $parmListString \x07];    set parmTypes [split {} {,}];    foreach {parmName parmValue} $parameterList {parmType} $parmTypes {      set parmValue [quotifyForParameterFileV3 $parmValue];      lappend commandArguments --$parmName;      lappend commandArgumentsToLog --$parmName;      lappend commandArguments $parmValue;      if { [string first {PASSWORD} $parmType] != -1 } {           lappend commandArgumentsToLog {*********};      } else {           lappend commandArgumentsToLog $parmValue;      };    };    lappend WorkspaceRunner_CreateLicenseServer_46391337_6baa_40f3_b26f_fd1430e303482_commands [join $commandArguments " "];    incr WorkspaceRunner_CreateLicenseServer_46391337_6baa_40f3_b26f_fd1430e303482_batch_count;    if { {Yes} == {No} && {<Unused>} > 1  && $WorkspaceRunner_CreateLicenseServer_46391337_6baa_40f3_b26f_fd1430e303482_batch_count <= {<Unused>} } {       FME_LogMessage fme_inform 933450 WorkspaceRunner_CreateLicenseServer $commandArgumentsToLog;    } else {       FME_LogMessage fme_inform 933451 WorkspaceRunner_CreateLicenseServer $commandArgumentsToLog;    };    if { {Yes} != {No} || $WorkspaceRunner_CreateLicenseServer_46391337_6baa_40f3_b26f_fd1430e303482_batch_count == {<Unused>} } {       set WorkspaceRunner_CreateLicenseServer_46391337_6baa_40f3_b26f_fd1430e303482_batch_count 0;       set commandFile [WorkspaceRunner_CreateLicenseServer_46391337_6baa_40f3_b26f_fd1430e303482_writeCommandFile $WorkspaceRunner_CreateLicenseServer_46391337_6baa_40f3_b26f_fd1430e303482_commands];       if { $commandFile == {} } {          return FAILURE;       };       set WorkspaceRunner_CreateLicenseServer_46391337_6baa_40f3_b26f_fd1430e303482_commands {};       set fmeAbsPath {$(FME_HOME_UNIX)/fme};       if { {Yes} == {No} && $::__platform__ == {windows} }       {          set comment          {             Only on Windows in non-blocking mode we have to make sure that paths             are always quoted because we use non-Tcl method to run the final command          };          set commandFile \\"$commandFile\\";          set fmeAbsPath \\"$fmeAbsPath\\";       };       lappend cmdArgs {*}$::__WR_ENV_HELPER__ $fmeAbsPath COMMAND_FILE $commandFile;    } else {       return SUCCESS;    };    return [WorkspaceRunner_CreateLicenseServer_46391337_6baa_40f3_b26f_fd1430e303482_runCommand $cmdArgs $workspaceFileUnix]; }
# ------------------------------------------------------------------------------
# When batching commands, any overflow commands will be run at the end. Say you
# batch by 2 and there are 5 incoming features. Then we will have 2 batches with
# 2 commands each and 1 overflow batch with 1 command
Tcl2 proc WorkspaceRunner_CreateLicenseServer_46391337_6baa_40f3_b26f_fd1430e303482_flushPending { } {    global WorkspaceRunner_CreateLicenseServer_46391337_6baa_40f3_b26f_fd1430e303482_commands;    if { [info exists WorkspaceRunner_CreateLicenseServer_46391337_6baa_40f3_b26f_fd1430e303482_commands] == 1 && [llength $WorkspaceRunner_CreateLicenseServer_46391337_6baa_40f3_b26f_fd1430e303482_commands] > 0 } {       set workspaceToRun [lindex $WorkspaceRunner_CreateLicenseServer_46391337_6baa_40f3_b26f_fd1430e303482_commands 0];       set commandFile [WorkspaceRunner_CreateLicenseServer_46391337_6baa_40f3_b26f_fd1430e303482_writeCommandFile $WorkspaceRunner_CreateLicenseServer_46391337_6baa_40f3_b26f_fd1430e303482_commands];       if { $commandFile == {} } {          return FAILURE;       };       set WorkspaceRunner_CreateLicenseServer_46391337_6baa_40f3_b26f_fd1430e303482_commands {};       set fmeAbsPath {$(FME_HOME_UNIX)/fme};       if { {Yes} == {No} && $::__platform__ == {windows} }       {          set comment          {             Only on Windows in non-blocking mode we have to make sure that paths             are always quoted because we use non-Tcl method to run the final command          };          set commandFile \\"$commandFile\\";          set fmeAbsPath \\"$fmeAbsPath\\";       };       lappend commandArguments {*}$::__WR_ENV_HELPER__ $fmeAbsPath COMMAND_FILE $commandFile;       return [WorkspaceRunner_CreateLicenseServer_46391337_6baa_40f3_b26f_fd1430e303482_runCommand $commandArguments $workspaceToRun];    };    return SUCCESS; }
# ------------------------------------------------------------------------------
# Build and run the command
Tcl2 proc WorkspaceRunner_CreateLicenseServer_46391337_6baa_40f3_b26f_fd1430e303482_runCommand {commandArguments workspaceFileUnix} {    if { {Yes} == {No} && $::__platform__ != {windows} } {       lappend commandArguments \">$::null_device\";       lappend commandArguments \"<$::null_device\";    };    set comment    {       The below 2>@1 forces any standard error output to go into the msg variable       or to NULL if we're running in the background.    };    if { {Yes} != {No} || $::__platform__ != {windows} } {       lappend commandArguments {2>@1};    };    if { {Yes} == {No} } {        lappend commandArguments {&};    };    if { {Yes} == {No} } {       after 1000;       while { [FME_CanSpawnFme <Unused>] == {0} } {             after 2000;       };    };    if { Yes == {No} && {<Unused>} > 1 } {       FME_LogMessage fme_inform 933452 WorkspaceRunner_CreateLicenseServer $commandArguments;    } else {       FME_LogMessage fme_inform 933453 WorkspaceRunner_CreateLicenseServer $commandArguments;    };    if { $::__platform__ == {windows} && {Yes} == {No} } {       set comment       {          Only on Windows in non-blocking mode we convert Tcl list to string joined          by space (affectively flattening the list). Prior to this we have already          ensured that in this mode paths are always quoted.       };       set commandArguments [join $commandArguments " "];       set catchResult [catch {FME_Execute System RETURN_PID_IF_ASYNC $commandArguments} msg];    } else {       set catchResult [catch {eval [concat exec $commandArguments]} msg];    };    if { $catchResult } {       set msg [regsub {\015*\012child[^\012]*$} $msg {}];       FME_LogMessage fme_warn 933454 WorkspaceRunner_CreateLicenseServer $workspaceFileUnix "\n\n$msg\n";       FME_SetAttribute _failure_message $msg;       return FAILURE;    } else {       global WorkspaceRunner_CreateLicenseServer_46391337_6baa_40f3_b26f_fd1430e303482_process_count;       incr WorkspaceRunner_CreateLicenseServer_46391337_6baa_40f3_b26f_fd1430e303482_process_count;       if { {Yes} == {No} } {           FME_LogMessage fme_inform 933455 WorkspaceRunner_CreateLicenseServer $workspaceFileUnix;           global WorkspaceRunner_CreateLicenseServer_46391337_6baa_40f3_b26f_fd1430e303482_all_processes;           lappend WorkspaceRunner_CreateLicenseServer_46391337_6baa_40f3_b26f_fd1430e303482_all_processes $msg;       } else {           FME_LogMessage fme_inform 933456 WorkspaceRunner_CreateLicenseServer $workspaceFileUnix;       };       return SUCCESS;    }; }
# ------------------------------------------------------------------------------
# Create and write commands to command file
Tcl2 proc WorkspaceRunner_CreateLicenseServer_46391337_6baa_40f3_b26f_fd1430e303482_writeCommandFile { commands } {    set commandFile [FME_TempFilename wsr_cm_];    if { [catch { set cmdFileId [open $commandFile "w"] } msg ] } {       FME_LogMessage fme_warn 933457 WorkspaceRunner_CreateLicenseServer $commandFile "\n\n$msg\n";       FME_SetAttribute _failure_message $msg;       return {};    };    fconfigure $cmdFileId -encoding utf-8;    puts $cmdFileId {#! encoding=\"utf-8\"};    puts $cmdFileId DELETE_FILE_AFTER_LOAD;    foreach {command} $commands {       puts $cmdFileId $command;    };    close $cmdFileId;    return $commandFile; }
# ------------------------------------------------------------------------------
# Use \x07 (BELL) character as the delimiter when writing WORKSPACE_PARAMETERS
# to mapping file
FACTORY_DEF * TestFactory    FACTORY_NAME WorkspaceRunner_CreateLicenseServer_ExecutorAndRouter    INPUT  FEATURE_TYPE WorkspaceRunner_CreateVPC_SUCCEEDED    TEST @Tcl2("WorkspaceRunner_CreateLicenseServer_46391337_6baa_40f3_b26f_fd1430e303482_runner {()} {./CreateLicenseServer.fmw}") == SUCCESS    OUTPUT PASSED FEATURE_TYPE WorkspaceRunner_CreateLicenseServer_SUCCEEDED
Tcl2 proc WorkspaceRunner_CreateLicenseServer_46391337_6baa_40f3_b26f_fd1430e303482_summarizer { } {     global WorkspaceRunner_CreateLicenseServer_46391337_6baa_40f3_b26f_fd1430e303482_process_count;     set comment { incr 0 creates the variable if it wasn't present };     incr WorkspaceRunner_CreateLicenseServer_46391337_6baa_40f3_b26f_fd1430e303482_process_count 0;     FME_SetAttribute _proc_count [set WorkspaceRunner_CreateLicenseServer_46391337_6baa_40f3_b26f_fd1430e303482_process_count];     global WorkspaceRunner_CreateLicenseServer_46391337_6baa_40f3_b26f_fd1430e303482_all_processes;     if {[info exists WorkspaceRunner_CreateLicenseServer_46391337_6baa_40f3_b26f_fd1430e303482_all_processes]} {         set index 0;         foreach pid [set WorkspaceRunner_CreateLicenseServer_46391337_6baa_40f3_b26f_fd1430e303482_all_processes] {             FME_SetAttribute \"_processes{$index}\" $pid;             incr index;         }     } }
FACTORY_DEF * CreationFactory    FACTORY_NAME WorkspaceRunner_CreateLicenseServer_SummaryMaker    CREATE_AT_END yes
# -------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# Determine the "NULL" device so we can ensure we don't get stray output
# messing up our stdout if we are running workspaces in the background
# See http://wiki.tcl.tk/1649 for a description of the tcl_platform
# variable, the "platform" part seems to have valid values windows, unix, and
# macintosh (the latter of which is actually pre-OS X)
# PR#83334 - On Windows when we are creating child process asynchronously
# (BLOCKING == NO), we use FME's @System() call (FME_Execute System) ensuring
# that the child process doesn't inherit handles from parent process. This allows
# parent process to close feature caches and not depend on spawned processes.
Tcl2 if { $tcl_platform(platform) == {windows} } {         set ::null_device {NUL:};         set ::__WR_ENV_HELPER__ {};         set ::__platform__ {windows};      } else {         set ::null_device {/dev/null};         set ::__WR_ENV_HELPER__ {/usr/bin/env FME_SUBPROCESS_RUN_DETACHED=1};         set ::__platform__ {unix};      };
# ------------------------------------------------------------------------------
# Escape existing double quotes and then wrap in double quotes
Tcl2 proc quotifyForParameterFileV3 { sourceString } {   if {[string length $sourceString] == 0} {      return {\"\"};   };   set doQuote 0;   if {[string first { } $sourceString] != -1} {      set doQuote 1;   };   set sourceString [string map {{\"} {\\"}} $sourceString];   if {$doQuote == 1} {      set sourceString \\"$sourceString\\";   };   return $sourceString; };
# ------------------------------------------------------------------------------
# Main runner procedure, takes in a parameter list as string which is delimited
# by \x07 (BELL) character and the workspace to run
Tcl2 proc WorkspaceRunner_CreateFMEServer_d9925da8_95c2_47dd_9d2f_39ab55a9df802_runner { parmListString workspaceFile } {    global WorkspaceRunner_CreateFMEServer_d9925da8_95c2_47dd_9d2f_39ab55a9df802_commands;    global WorkspaceRunner_CreateFMEServer_d9925da8_95c2_47dd_9d2f_39ab55a9df802_batch_count;    incr WorkspaceRunner_CreateFMEServer_d9925da8_95c2_47dd_9d2f_39ab55a9df802_batch_count 0;    if { [info exists WorkspaceRunner_CreateFMEServer_d9925da8_95c2_47dd_9d2f_39ab55a9df802_commands] == 0 } {       set WorkspaceRunner_CreateFMEServer_d9925da8_95c2_47dd_9d2f_39ab55a9df802_commands {};    };    set workspaceFileUnix [regsub -all {\\} $workspaceFile {/}];    set parmListString [string range $parmListString 1 end-1];    set comment    {        Build up the command line in a list, which we'll write it out to a        parameter file.    };    set commandArguments {};    set commandArgumentsToLog {};    set workspaceToRun [quotifyForParameterFileV3 $workspaceFileUnix];    lappend commandArguments $workspaceToRun;    lappend commandArgumentsToLog $workspaceToRun;    set parameterList [split $parmListString \x07];    set parmTypes [split {} {,}];    foreach {parmName parmValue} $parameterList {parmType} $parmTypes {      set parmValue [quotifyForParameterFileV3 $parmValue];      lappend commandArguments --$parmName;      lappend commandArgumentsToLog --$parmName;      lappend commandArguments $parmValue;      if { [string first {PASSWORD} $parmType] != -1 } {           lappend commandArgumentsToLog {*********};      } else {           lappend commandArgumentsToLog $parmValue;      };    };    lappend WorkspaceRunner_CreateFMEServer_d9925da8_95c2_47dd_9d2f_39ab55a9df802_commands [join $commandArguments " "];    incr WorkspaceRunner_CreateFMEServer_d9925da8_95c2_47dd_9d2f_39ab55a9df802_batch_count;    if { {Yes} == {No} && {<Unused>} > 1  && $WorkspaceRunner_CreateFMEServer_d9925da8_95c2_47dd_9d2f_39ab55a9df802_batch_count <= {<Unused>} } {       FME_LogMessage fme_inform 933450 WorkspaceRunner_CreateFMEServer $commandArgumentsToLog;    } else {       FME_LogMessage fme_inform 933451 WorkspaceRunner_CreateFMEServer $commandArgumentsToLog;    };    if { {Yes} != {No} || $WorkspaceRunner_CreateFMEServer_d9925da8_95c2_47dd_9d2f_39ab55a9df802_batch_count == {<Unused>} } {       set WorkspaceRunner_CreateFMEServer_d9925da8_95c2_47dd_9d2f_39ab55a9df802_batch_count 0;       set commandFile [WorkspaceRunner_CreateFMEServer_d9925da8_95c2_47dd_9d2f_39ab55a9df802_writeCommandFile $WorkspaceRunner_CreateFMEServer_d9925da8_95c2_47dd_9d2f_39ab55a9df802_commands];       if { $commandFile == {} } {          return FAILURE;       };       set WorkspaceRunner_CreateFMEServer_d9925da8_95c2_47dd_9d2f_39ab55a9df802_commands {};       set fmeAbsPath {$(FME_HOME_UNIX)/fme};       if { {Yes} == {No} && $::__platform__ == {windows} }       {          set comment          {             Only on Windows in non-blocking mode we have to make sure that paths             are always quoted because we use non-Tcl method to run the final command          };          set commandFile \\"$commandFile\\";          set fmeAbsPath \\"$fmeAbsPath\\";       };       lappend cmdArgs {*}$::__WR_ENV_HELPER__ $fmeAbsPath COMMAND_FILE $commandFile;    } else {       return SUCCESS;    };    return [WorkspaceRunner_CreateFMEServer_d9925da8_95c2_47dd_9d2f_39ab55a9df802_runCommand $cmdArgs $workspaceFileUnix]; }
# ------------------------------------------------------------------------------
# When batching commands, any overflow commands will be run at the end. Say you
# batch by 2 and there are 5 incoming features. Then we will have 2 batches with
# 2 commands each and 1 overflow batch with 1 command
Tcl2 proc WorkspaceRunner_CreateFMEServer_d9925da8_95c2_47dd_9d2f_39ab55a9df802_flushPending { } {    global WorkspaceRunner_CreateFMEServer_d9925da8_95c2_47dd_9d2f_39ab55a9df802_commands;    if { [info exists WorkspaceRunner_CreateFMEServer_d9925da8_95c2_47dd_9d2f_39ab55a9df802_commands] == 1 && [llength $WorkspaceRunner_CreateFMEServer_d9925da8_95c2_47dd_9d2f_39ab55a9df802_commands] > 0 } {       set workspaceToRun [lindex $WorkspaceRunner_CreateFMEServer_d9925da8_95c2_47dd_9d2f_39ab55a9df802_commands 0];       set commandFile [WorkspaceRunner_CreateFMEServer_d9925da8_95c2_47dd_9d2f_39ab55a9df802_writeCommandFile $WorkspaceRunner_CreateFMEServer_d9925da8_95c2_47dd_9d2f_39ab55a9df802_commands];       if { $commandFile == {} } {          return FAILURE;       };       set WorkspaceRunner_CreateFMEServer_d9925da8_95c2_47dd_9d2f_39ab55a9df802_commands {};       set fmeAbsPath {$(FME_HOME_UNIX)/fme};       if { {Yes} == {No} && $::__platform__ == {windows} }       {          set comment          {             Only on Windows in non-blocking mode we have to make sure that paths             are always quoted because we use non-Tcl method to run the final command          };          set commandFile \\"$commandFile\\";          set fmeAbsPath \\"$fmeAbsPath\\";       };       lappend commandArguments {*}$::__WR_ENV_HELPER__ $fmeAbsPath COMMAND_FILE $commandFile;       return [WorkspaceRunner_CreateFMEServer_d9925da8_95c2_47dd_9d2f_39ab55a9df802_runCommand $commandArguments $workspaceToRun];    };    return SUCCESS; }
# ------------------------------------------------------------------------------
# Build and run the command
Tcl2 proc WorkspaceRunner_CreateFMEServer_d9925da8_95c2_47dd_9d2f_39ab55a9df802_runCommand {commandArguments workspaceFileUnix} {    if { {Yes} == {No} && $::__platform__ != {windows} } {       lappend commandArguments \">$::null_device\";       lappend commandArguments \"<$::null_device\";    };    set comment    {       The below 2>@1 forces any standard error output to go into the msg variable       or to NULL if we're running in the background.    };    if { {Yes} != {No} || $::__platform__ != {windows} } {       lappend commandArguments {2>@1};    };    if { {Yes} == {No} } {        lappend commandArguments {&};    };    if { {Yes} == {No} } {       after 1000;       while { [FME_CanSpawnFme <Unused>] == {0} } {             after 2000;       };    };    if { Yes == {No} && {<Unused>} > 1 } {       FME_LogMessage fme_inform 933452 WorkspaceRunner_CreateFMEServer $commandArguments;    } else {       FME_LogMessage fme_inform 933453 WorkspaceRunner_CreateFMEServer $commandArguments;    };    if { $::__platform__ == {windows} && {Yes} == {No} } {       set comment       {          Only on Windows in non-blocking mode we convert Tcl list to string joined          by space (affectively flattening the list). Prior to this we have already          ensured that in this mode paths are always quoted.       };       set commandArguments [join $commandArguments " "];       set catchResult [catch {FME_Execute System RETURN_PID_IF_ASYNC $commandArguments} msg];    } else {       set catchResult [catch {eval [concat exec $commandArguments]} msg];    };    if { $catchResult } {       set msg [regsub {\015*\012child[^\012]*$} $msg {}];       FME_LogMessage fme_warn 933454 WorkspaceRunner_CreateFMEServer $workspaceFileUnix "\n\n$msg\n";       FME_SetAttribute _failure_message $msg;       return FAILURE;    } else {       global WorkspaceRunner_CreateFMEServer_d9925da8_95c2_47dd_9d2f_39ab55a9df802_process_count;       incr WorkspaceRunner_CreateFMEServer_d9925da8_95c2_47dd_9d2f_39ab55a9df802_process_count;       if { {Yes} == {No} } {           FME_LogMessage fme_inform 933455 WorkspaceRunner_CreateFMEServer $workspaceFileUnix;           global WorkspaceRunner_CreateFMEServer_d9925da8_95c2_47dd_9d2f_39ab55a9df802_all_processes;           lappend WorkspaceRunner_CreateFMEServer_d9925da8_95c2_47dd_9d2f_39ab55a9df802_all_processes $msg;       } else {           FME_LogMessage fme_inform 933456 WorkspaceRunner_CreateFMEServer $workspaceFileUnix;       };       return SUCCESS;    }; }
# ------------------------------------------------------------------------------
# Create and write commands to command file
Tcl2 proc WorkspaceRunner_CreateFMEServer_d9925da8_95c2_47dd_9d2f_39ab55a9df802_writeCommandFile { commands } {    set commandFile [FME_TempFilename wsr_cm_];    if { [catch { set cmdFileId [open $commandFile "w"] } msg ] } {       FME_LogMessage fme_warn 933457 WorkspaceRunner_CreateFMEServer $commandFile "\n\n$msg\n";       FME_SetAttribute _failure_message $msg;       return {};    };    fconfigure $cmdFileId -encoding utf-8;    puts $cmdFileId {#! encoding=\"utf-8\"};    puts $cmdFileId DELETE_FILE_AFTER_LOAD;    foreach {command} $commands {       puts $cmdFileId $command;    };    close $cmdFileId;    return $commandFile; }
# ------------------------------------------------------------------------------
# Use \x07 (BELL) character as the delimiter when writing WORKSPACE_PARAMETERS
# to mapping file
FACTORY_DEF * TestFactory    FACTORY_NAME WorkspaceRunner_CreateFMEServer_ExecutorAndRouter    INPUT  FEATURE_TYPE WorkspaceRunner_CreateLicenseServer_SUCCEEDED    TEST @Tcl2("WorkspaceRunner_CreateFMEServer_d9925da8_95c2_47dd_9d2f_39ab55a9df802_runner {()} {@EvaluateExpression(FDIV,STRING,$(FME_MF_DIR$encode)CreateFMEServer.fmw,WorkspaceRunner_CreateFMEServer)}") == SUCCESS    OUTPUT PASSED FEATURE_TYPE WorkspaceRunner_CreateFMEServer_SUCCEEDED
Tcl2 proc WorkspaceRunner_CreateFMEServer_d9925da8_95c2_47dd_9d2f_39ab55a9df802_summarizer { } {     global WorkspaceRunner_CreateFMEServer_d9925da8_95c2_47dd_9d2f_39ab55a9df802_process_count;     set comment { incr 0 creates the variable if it wasn't present };     incr WorkspaceRunner_CreateFMEServer_d9925da8_95c2_47dd_9d2f_39ab55a9df802_process_count 0;     FME_SetAttribute _proc_count [set WorkspaceRunner_CreateFMEServer_d9925da8_95c2_47dd_9d2f_39ab55a9df802_process_count];     global WorkspaceRunner_CreateFMEServer_d9925da8_95c2_47dd_9d2f_39ab55a9df802_all_processes;     if {[info exists WorkspaceRunner_CreateFMEServer_d9925da8_95c2_47dd_9d2f_39ab55a9df802_all_processes]} {         set index 0;         foreach pid [set WorkspaceRunner_CreateFMEServer_d9925da8_95c2_47dd_9d2f_39ab55a9df802_all_processes] {             FME_SetAttribute \"_processes{$index}\" $pid;             incr index;         }     } }
FACTORY_DEF * CreationFactory    FACTORY_NAME WorkspaceRunner_CreateFMEServer_SummaryMaker    CREATE_AT_END yes
# -------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# Determine the "NULL" device so we can ensure we don't get stray output
# messing up our stdout if we are running workspaces in the background
# See http://wiki.tcl.tk/1649 for a description of the tcl_platform
# variable, the "platform" part seems to have valid values windows, unix, and
# macintosh (the latter of which is actually pre-OS X)
# PR#83334 - On Windows when we are creating child process asynchronously
# (BLOCKING == NO), we use FME's @System() call (FME_Execute System) ensuring
# that the child process doesn't inherit handles from parent process. This allows
# parent process to close feature caches and not depend on spawned processes.
Tcl2 if { $tcl_platform(platform) == {windows} } {         set ::null_device {NUL:};         set ::__WR_ENV_HELPER__ {};         set ::__platform__ {windows};      } else {         set ::null_device {/dev/null};         set ::__WR_ENV_HELPER__ {/usr/bin/env FME_SUBPROCESS_RUN_DETACHED=1};         set ::__platform__ {unix};      };
# ------------------------------------------------------------------------------
# Escape existing double quotes and then wrap in double quotes
Tcl2 proc quotifyForParameterFileV3 { sourceString } {   if {[string length $sourceString] == 0} {      return {\"\"};   };   set doQuote 0;   if {[string first { } $sourceString] != -1} {      set doQuote 1;   };   set sourceString [string map {{\"} {\\"}} $sourceString];   if {$doQuote == 1} {      set sourceString \\"$sourceString\\";   };   return $sourceString; };
# ------------------------------------------------------------------------------
# Main runner procedure, takes in a parameter list as string which is delimited
# by \x07 (BELL) character and the workspace to run
Tcl2 proc WorkspaceRunner_InitialMachineCreator_9dee0a26_3040_4c6f_9e14_92de9f0f6fb22_runner { parmListString workspaceFile } {    global WorkspaceRunner_InitialMachineCreator_9dee0a26_3040_4c6f_9e14_92de9f0f6fb22_commands;    global WorkspaceRunner_InitialMachineCreator_9dee0a26_3040_4c6f_9e14_92de9f0f6fb22_batch_count;    incr WorkspaceRunner_InitialMachineCreator_9dee0a26_3040_4c6f_9e14_92de9f0f6fb22_batch_count 0;    if { [info exists WorkspaceRunner_InitialMachineCreator_9dee0a26_3040_4c6f_9e14_92de9f0f6fb22_commands] == 0 } {       set WorkspaceRunner_InitialMachineCreator_9dee0a26_3040_4c6f_9e14_92de9f0f6fb22_commands {};    };    set workspaceFileUnix [regsub -all {\\} $workspaceFile {/}];    set parmListString [string range $parmListString 1 end-1];    set comment    {        Build up the command line in a list, which we'll write it out to a        parameter file.    };    set commandArguments {};    set commandArgumentsToLog {};    set workspaceToRun [quotifyForParameterFileV3 $workspaceFileUnix];    lappend commandArguments $workspaceToRun;    lappend commandArgumentsToLog $workspaceToRun;    set parameterList [split $parmListString \x07];    set parmTypes [split {} {,}];    foreach {parmName parmValue} $parameterList {parmType} $parmTypes {      set parmValue [quotifyForParameterFileV3 $parmValue];      lappend commandArguments --$parmName;      lappend commandArgumentsToLog --$parmName;      lappend commandArguments $parmValue;      if { [string first {PASSWORD} $parmType] != -1 } {           lappend commandArgumentsToLog {*********};      } else {           lappend commandArgumentsToLog $parmValue;      };    };    lappend WorkspaceRunner_InitialMachineCreator_9dee0a26_3040_4c6f_9e14_92de9f0f6fb22_commands [join $commandArguments " "];    incr WorkspaceRunner_InitialMachineCreator_9dee0a26_3040_4c6f_9e14_92de9f0f6fb22_batch_count;    if { {Yes} == {No} && {<Unused>} > 1  && $WorkspaceRunner_InitialMachineCreator_9dee0a26_3040_4c6f_9e14_92de9f0f6fb22_batch_count <= {<Unused>} } {       FME_LogMessage fme_inform 933450 WorkspaceRunner_InitialMachineCreator $commandArgumentsToLog;    } else {       FME_LogMessage fme_inform 933451 WorkspaceRunner_InitialMachineCreator $commandArgumentsToLog;    };    if { {Yes} != {No} || $WorkspaceRunner_InitialMachineCreator_9dee0a26_3040_4c6f_9e14_92de9f0f6fb22_batch_count == {<Unused>} } {       set WorkspaceRunner_InitialMachineCreator_9dee0a26_3040_4c6f_9e14_92de9f0f6fb22_batch_count 0;       set commandFile [WorkspaceRunner_InitialMachineCreator_9dee0a26_3040_4c6f_9e14_92de9f0f6fb22_writeCommandFile $WorkspaceRunner_InitialMachineCreator_9dee0a26_3040_4c6f_9e14_92de9f0f6fb22_commands];       if { $commandFile == {} } {          return FAILURE;       };       set WorkspaceRunner_InitialMachineCreator_9dee0a26_3040_4c6f_9e14_92de9f0f6fb22_commands {};       set fmeAbsPath {$(FME_HOME_UNIX)/fme};       if { {Yes} == {No} && $::__platform__ == {windows} }       {          set comment          {             Only on Windows in non-blocking mode we have to make sure that paths             are always quoted because we use non-Tcl method to run the final command          };          set commandFile \\"$commandFile\\";          set fmeAbsPath \\"$fmeAbsPath\\";       };       lappend cmdArgs {*}$::__WR_ENV_HELPER__ $fmeAbsPath COMMAND_FILE $commandFile;    } else {       return SUCCESS;    };    return [WorkspaceRunner_InitialMachineCreator_9dee0a26_3040_4c6f_9e14_92de9f0f6fb22_runCommand $cmdArgs $workspaceFileUnix]; }
# ------------------------------------------------------------------------------
# When batching commands, any overflow commands will be run at the end. Say you
# batch by 2 and there are 5 incoming features. Then we will have 2 batches with
# 2 commands each and 1 overflow batch with 1 command
Tcl2 proc WorkspaceRunner_InitialMachineCreator_9dee0a26_3040_4c6f_9e14_92de9f0f6fb22_flushPending { } {    global WorkspaceRunner_InitialMachineCreator_9dee0a26_3040_4c6f_9e14_92de9f0f6fb22_commands;    if { [info exists WorkspaceRunner_InitialMachineCreator_9dee0a26_3040_4c6f_9e14_92de9f0f6fb22_commands] == 1 && [llength $WorkspaceRunner_InitialMachineCreator_9dee0a26_3040_4c6f_9e14_92de9f0f6fb22_commands] > 0 } {       set workspaceToRun [lindex $WorkspaceRunner_InitialMachineCreator_9dee0a26_3040_4c6f_9e14_92de9f0f6fb22_commands 0];       set commandFile [WorkspaceRunner_InitialMachineCreator_9dee0a26_3040_4c6f_9e14_92de9f0f6fb22_writeCommandFile $WorkspaceRunner_InitialMachineCreator_9dee0a26_3040_4c6f_9e14_92de9f0f6fb22_commands];       if { $commandFile == {} } {          return FAILURE;       };       set WorkspaceRunner_InitialMachineCreator_9dee0a26_3040_4c6f_9e14_92de9f0f6fb22_commands {};       set fmeAbsPath {$(FME_HOME_UNIX)/fme};       if { {Yes} == {No} && $::__platform__ == {windows} }       {          set comment          {             Only on Windows in non-blocking mode we have to make sure that paths             are always quoted because we use non-Tcl method to run the final command          };          set commandFile \\"$commandFile\\";          set fmeAbsPath \\"$fmeAbsPath\\";       };       lappend commandArguments {*}$::__WR_ENV_HELPER__ $fmeAbsPath COMMAND_FILE $commandFile;       return [WorkspaceRunner_InitialMachineCreator_9dee0a26_3040_4c6f_9e14_92de9f0f6fb22_runCommand $commandArguments $workspaceToRun];    };    return SUCCESS; }
# ------------------------------------------------------------------------------
# Build and run the command
Tcl2 proc WorkspaceRunner_InitialMachineCreator_9dee0a26_3040_4c6f_9e14_92de9f0f6fb22_runCommand {commandArguments workspaceFileUnix} {    if { {Yes} == {No} && $::__platform__ != {windows} } {       lappend commandArguments \">$::null_device\";       lappend commandArguments \"<$::null_device\";    };    set comment    {       The below 2>@1 forces any standard error output to go into the msg variable       or to NULL if we're running in the background.    };    if { {Yes} != {No} || $::__platform__ != {windows} } {       lappend commandArguments {2>@1};    };    if { {Yes} == {No} } {        lappend commandArguments {&};    };    if { {Yes} == {No} } {       after 1000;       while { [FME_CanSpawnFme <Unused>] == {0} } {             after 2000;       };    };    if { Yes == {No} && {<Unused>} > 1 } {       FME_LogMessage fme_inform 933452 WorkspaceRunner_InitialMachineCreator $commandArguments;    } else {       FME_LogMessage fme_inform 933453 WorkspaceRunner_InitialMachineCreator $commandArguments;    };    if { $::__platform__ == {windows} && {Yes} == {No} } {       set comment       {          Only on Windows in non-blocking mode we convert Tcl list to string joined          by space (affectively flattening the list). Prior to this we have already          ensured that in this mode paths are always quoted.       };       set commandArguments [join $commandArguments " "];       set catchResult [catch {FME_Execute System RETURN_PID_IF_ASYNC $commandArguments} msg];    } else {       set catchResult [catch {eval [concat exec $commandArguments]} msg];    };    if { $catchResult } {       set msg [regsub {\015*\012child[^\012]*$} $msg {}];       FME_LogMessage fme_warn 933454 WorkspaceRunner_InitialMachineCreator $workspaceFileUnix "\n\n$msg\n";       FME_SetAttribute _failure_message $msg;       return FAILURE;    } else {       global WorkspaceRunner_InitialMachineCreator_9dee0a26_3040_4c6f_9e14_92de9f0f6fb22_process_count;       incr WorkspaceRunner_InitialMachineCreator_9dee0a26_3040_4c6f_9e14_92de9f0f6fb22_process_count;       if { {Yes} == {No} } {           FME_LogMessage fme_inform 933455 WorkspaceRunner_InitialMachineCreator $workspaceFileUnix;           global WorkspaceRunner_InitialMachineCreator_9dee0a26_3040_4c6f_9e14_92de9f0f6fb22_all_processes;           lappend WorkspaceRunner_InitialMachineCreator_9dee0a26_3040_4c6f_9e14_92de9f0f6fb22_all_processes $msg;       } else {           FME_LogMessage fme_inform 933456 WorkspaceRunner_InitialMachineCreator $workspaceFileUnix;       };       return SUCCESS;    }; }
# ------------------------------------------------------------------------------
# Create and write commands to command file
Tcl2 proc WorkspaceRunner_InitialMachineCreator_9dee0a26_3040_4c6f_9e14_92de9f0f6fb22_writeCommandFile { commands } {    set commandFile [FME_TempFilename wsr_cm_];    if { [catch { set cmdFileId [open $commandFile "w"] } msg ] } {       FME_LogMessage fme_warn 933457 WorkspaceRunner_InitialMachineCreator $commandFile "\n\n$msg\n";       FME_SetAttribute _failure_message $msg;       return {};    };    fconfigure $cmdFileId -encoding utf-8;    puts $cmdFileId {#! encoding=\"utf-8\"};    puts $cmdFileId DELETE_FILE_AFTER_LOAD;    foreach {command} $commands {       puts $cmdFileId $command;    };    close $cmdFileId;    return $commandFile; }
# ------------------------------------------------------------------------------
# Use \x07 (BELL) character as the delimiter when writing WORKSPACE_PARAMETERS
# to mapping file
FACTORY_DEF * TestFactory    FACTORY_NAME WorkspaceRunner_InitialMachineCreator_ExecutorAndRouter    INPUT  FEATURE_TYPE WorkspaceRunner_CreateFMEServer_SUCCEEDED    TEST @Tcl2("WorkspaceRunner_InitialMachineCreator_9dee0a26_3040_4c6f_9e14_92de9f0f6fb22_runner {()} {./InitialMachineCreator.fmw}") == SUCCESS
Tcl2 proc WorkspaceRunner_InitialMachineCreator_9dee0a26_3040_4c6f_9e14_92de9f0f6fb22_summarizer { } {     global WorkspaceRunner_InitialMachineCreator_9dee0a26_3040_4c6f_9e14_92de9f0f6fb22_process_count;     set comment { incr 0 creates the variable if it wasn't present };     incr WorkspaceRunner_InitialMachineCreator_9dee0a26_3040_4c6f_9e14_92de9f0f6fb22_process_count 0;     FME_SetAttribute _proc_count [set WorkspaceRunner_InitialMachineCreator_9dee0a26_3040_4c6f_9e14_92de9f0f6fb22_process_count];     global WorkspaceRunner_InitialMachineCreator_9dee0a26_3040_4c6f_9e14_92de9f0f6fb22_all_processes;     if {[info exists WorkspaceRunner_InitialMachineCreator_9dee0a26_3040_4c6f_9e14_92de9f0f6fb22_all_processes]} {         set index 0;         foreach pid [set WorkspaceRunner_InitialMachineCreator_9dee0a26_3040_4c6f_9e14_92de9f0f6fb22_all_processes] {             FME_SetAttribute \"_processes{$index}\" $pid;             incr index;         }     } }
FACTORY_DEF * CreationFactory    FACTORY_NAME WorkspaceRunner_InitialMachineCreator_SummaryMaker    CREATE_AT_END yes
# -------------------------------------------------------------------------

FACTORY_DEF * RoutingFactory FACTORY_NAME "Destination Feature Type Routing Correlator"   COMMAND_PARM_EVALUATION SINGLE_PASS   INPUT FEATURE_TYPE *   FEATURE_TYPE_ATTRIBUTE __wb_out_feat_type__   OUTPUT ROUTED FEATURE_TYPE *    OUTPUT NOT_ROUTED FEATURE_TYPE __nuke_me__ @Tcl2("FME_StatMessage 818059 [FME_GetAttribute fme_template_feature_type] 818060 818061 fme_warn")
# -------------------------------------------------------------------------

FACTORY_DEF * TeeFactory   FACTORY_NAME "Final Output Nuker"   INPUT FEATURE_TYPE __nuke_me__

